{"version":3,"sources":["TodoList/Container.js","TodoList/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onFilter","e","setState","show","target","value","filtered","letter","toLowerCase","lists","forEach","item","indexOf","push","handleKeyPressEnter","key","enterButton","current","click","React","createRef","state","i","react_default","a","createElement","onClick","deleteItem","bind","className","_this2","onKeyPress","placeholder","type","onChange","onSubmit","ref","map","renderLi","Component","TodoList","preventDefault","newItem","trim","toConsumableArray","concat","localStorage","setItem","JSON","stringify","index","filter","getItem","parse","src_TodoList_Container","App","src_TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.05bc2193.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Container.css';\r\n\r\nclass Container extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.enterButton = React.createRef();\r\n        this.state ={\r\n            show: true,\r\n            filtered: []\r\n        };\r\n    }\r\n\r\n    onFilter = e => {\r\n        this.setState({show: e.target.value === ''});\r\n        let filtered = [];\r\n        const letter = e.target.value.toLowerCase();\r\n        this.props.lists.forEach(function (item) {\r\n            if(item.toLowerCase().indexOf(letter) !== -1){\r\n                filtered.push(item);\r\n            }\r\n        });\r\n        this.setState({filtered});\r\n    };\r\n\r\n    renderLi(item,i){\r\n        return <li key={i}>{item}<button onClick={this.props.deleteItem.bind(this,i)} className='delete-item'>&times;</button></li>\r\n    }\r\n    handleKeyPressEnter = (e) => {\r\n        if (e.key === 'Enter') {\r\n            this.enterButton.current.click();\r\n        }\r\n    };\r\n    render() {\r\n        const lists = this.state.show ? this.props.lists : this.state.filtered;\r\n        return (\r\n            <div className=\"Elements\">\r\n                <input\r\n                    onKeyPress={this.handleKeyPressEnter}\r\n                    placeholder=\"Task\"\r\n                    type=\"text\"\r\n                    onChange={this.props.onChange}\r\n                    value={this.props.value}\r\n                />\r\n\r\n\r\n                <input type=\"submit\" value=\"Add Note\" onClick={this.props.onSubmit} ref={this.enterButton} />\r\n                <input type=\"text\" onChange={this.onFilter}/>\r\n                <ul className=\"List\">\r\n                    {lists !== \"\" && lists.map((item,i) => {\r\n                        return this.renderLi(item,i)\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Container;","import React, { Component } from 'react';\r\nimport './TodoList.css';\r\nimport Container from './Container';\r\n\r\n\r\nclass TodoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const lists = localStorage.getItem('List') === null ? [] : JSON.parse(localStorage.getItem('List'));\r\n        this.state ={\r\n            value: '',\r\n            lists: lists,\r\n        }\r\n    }\r\n\r\n    onChange = e => {\r\n        this.setState({value:e.target.value})\r\n    };\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n        const newItem = this.state.value;\r\n        if(newItem.trim() !== ''){\r\n            const lists = [...this.state.lists, newItem];\r\n            localStorage.setItem('List', JSON.stringify(lists));\r\n            this.setState({lists:lists, value:\"\"});\r\n        }\r\n    };\r\n\r\n    deleteItem = index =>{\r\n        const lists = this.state.lists.filter((item, i ) => {\r\n            return index !== i\r\n        });\r\n        this.setState({lists:lists});\r\n        localStorage.setItem('List', JSON.stringify(lists));\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"TodoList\">\r\n                <h1>App For Note</h1>\r\n               <Container\r\n                   value={this.state.value}\r\n                   onSubmit={this.onSubmit}\r\n                   onChange={this.onChange}\r\n                   lists={this.state.lists}\r\n                   deleteItem={this.deleteItem}\r\n               />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React, { Component } from 'react';\nimport TodoList from './TodoList/TodoList';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}